<!DOCTYPE html>
<html lang="fr">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- End Required meta tags -->
    <title>{% block title %}Welcome!{% endblock %}</title>
    <!-- FAVICONS -->
    <link rel="apple-touch-icon" sizes="144x144" href="{{ asset('img/favicone.png') }}">
    <meta name="theme-color" content="#3063A0">
    <!-- End FAVICONS -->
    <!-- GOOGLE FONT -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:400,500,600" rel="stylesheet"><!-- End GOOGLE FONT -->
    <!-- BEGIN PLUGINS STYLES -->

    {{ encore_entry_link_tags('app') }}

    <!-- BEGIN THEME STYLES -->
    <link rel="stylesheet" href="{{ asset('css/theme.min.css') }}" data-skin="default">
    <link rel="stylesheet" href="{{ asset('css/theme-dark.min.css') }}" data-skin="dark">
    {#    <link rel="stylesheet" href="{{ asset('css/custom.css') }}"> #}
    {% block stylesheets %}
        <style>
            fieldset > legend {
                color: inherit;
                margin-bottom: 1rem;
                font-size: 1rem;
                border-bottom: 1px solid rgb(225, 231, 214);
            }


            div.bg-soft-custom {
                background-color: #232754;
                color: #FFFFFF;
                padding: 0.5rem !important;
            }

            .font-header tr {
                font-size: 11px;
                text-align: center !important;
            }

            label.text-right {
                text-align: left !important;
            }
        </style>
    {% endblock %}

    <script>
        var skin = localStorage.getItem('skin') || 'default';
        var isCompact = JSON.parse(localStorage.getItem('hasCompactMenu'));
        var disabledSkinStylesheet = document.querySelector('link[data-skin]:not([data-skin="' + skin + '"])');
        // Disable unused skin immediately
        disabledSkinStylesheet.setAttribute('rel', '');
        disabledSkinStylesheet.setAttribute('disabled', true);
        // add flag class to html immediately
        if (isCompact === true) document.querySelector('html').classList.add('preparing-compact-menu');
    </script>

    <!-- END THEME STYLES -->
</head>
<body>
<!-- .app -->
<div class="app">
    <!--[if lt IE 10]>
    <div class="page-message" role="alert">You are using an <strong>outdated</strong> browser. Please <a
            class="alert-link" href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and
        security.
    </div>
    <![endif]-->
    <!-- .app-header -->
    {% include 'partials/_header.html.twig' %}
    <!-- .app-aside -->
    {% include 'partials/_aside.html.twig' %}

    <!-- /.app-aside -->
    <!-- .app-main -->
    <main class="app-main">
        <!-- .wrapper -->
        <div class="wrapper">
            <!-- .page -->
            <div class="page">
                <!-- .page-inner -->
                <div class="page-inner">

                    <!-- .page-section -->
                    <div class="page-section">
                        {% block body %}{% endblock %}
                    </div><!-- /.page-section -->
                </div><!-- /.page-inner -->
            </div><!-- /.page -->
        </div><!-- .app-footer -->
        <footer class="app-footer">
            <ul class="list-inline">

                <li class="list-inline-item">
                    <a class="text-muted" href="#">Support</a>
                </li>
                <li class="list-inline-item">
                    <a class="text-muted" href="#">Help Center</a>
                </li>
                <li class="list-inline-item">
                    <a class="text-muted" href="#">Privacy</a>
                </li>
                <li class="list-inline-item">
                    <a class="text-muted" href="#">Terms of Service</a>
                </li>
            </ul>
            <div class="copyright"> Copyright © {{ 'now'| date('Y') }}. All right reserved.</div>
        </footer><!-- /.app-footer -->
        <!-- /.wrapper -->
    </main><!-- /.app-main -->

</div><!-- /.app -->
{% set userId = app.user.id %}
{% set caisseId =  app.user.caisse ? app.user.caisse.id %}
<script src="{{ asset('js/jquery.min.js') }}"></script>
<script src="{{ asset('js/popper.min.js') }}"></script>
<script src="{{ asset('js/bootstrap.min.js') }}"></script>
<script src="{{ asset('js/pace.min.js') }}"></script>
<script src="{{ asset('js/stacked-menu.min.js') }}"></script>
<script src="{{ asset('js/perfect-scrollbar.min.js') }}"></script>
<script src="{{ asset('js/flatpickr.min.js') }}"></script>

{{ encore_entry_script_tags('app') }}


<script src="https://js.pusher.com/7.0/pusher.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- BEGIN BASE JS -->
<script src="{{ asset('js/theme.js') }}"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
{% block javascripts %}
{% endblock %}
<script>
    {% for label, messages in app.flashes %}
    {% for message in messages %}
    toastr.{{ label }}("{{ message }}")
    {% endfor %}
    {% endfor %}
</script>

<script>
    window.User = {id: {{ userId }} };
    window.Caisse = {id: {{ caisseId ? caisseId : 'null' }} }
    let permissions = [];
    {% for p in app.token.roleNames %}
    permissions.push('{{ p }}')
    {% endfor %}

    const pusher = new Pusher('d1c1b712fda2bf24cba8', {cluster: 'mt1'});
    Pusher.logToConsole = true;
    const channel = pusher.subscribe('notify');
    const userId = window.User.id;

    const caisseId = window.Caisse.id

    // Fonction pour mettre à jour le compteur de notifications non lues et le badge d'application
        function updateNotificationCount() {
        let unreadCount = $('#notification-body').children('.dropdown-item.unread').length;

        // Mets à jour le compteur dans la boîte de notification
        $('#notification-count').text(unreadCount > 0 ? unreadCount : '');

        // Mets à jour le badge de l'application avec le nombre de notifications non lues
        if ('setAppBadge' in navigator) {
            if (unreadCount > 0) {
                navigator.setAppBadge(unreadCount).catch((error) => console.warn('Erreur App Badge', error));
            } else {
                navigator.clearAppBadge();
            }
        }
    }

    // Initialiser le compteur au chargement de la page
    $(document).ready(function() {
        updateNotificationCount();
    });

    // Event listener pour marquer les notifications comme lues lorsqu'elles sont cliquées
    $(document).on('click', '#notification-body .dropdown-item.unread', function() {
        $(this).removeClass('unread');  // Retire la classe 'unread'
        updateNotificationCount();      // Mets à jour le compteur
    });

    // Gestion des notifications pour chaque channel
    channel.bind(`responsable.${userId}`, function (data) {
        if (data) {
            const {message, link, responsableId, permission} = data;
            toastr.success(`${message}`, 'Fiche de besoin', {
                "closeButton": true,
                "preventDuplicates": false,
                "onclick": function () {
                    window.location.href = link; // Redirection vers l'index d'approvisionnement
                }
            });
            let $notification1 = $('#notification-body');
            let notificationCount = $notification1.children().length;
            if (!$notification1.hasClass('dropdown-scroll has-scrollable') && notificationCount > 3) {
                $notification1.addClass('dropdown-scroll has-scrollable');
            }
            if (notificationCount === 1) {
                $notification1.empty();
            }
            if (!$('#header-notification').hasClass('has-notified')) {
                $('#header-notification').addClass('has-notified');
            }
            $notification1.append(`<a href="${link}" class="dropdown-item unread">
                <div class="user-avatar">
                </div>
                <div class="dropdown-item-body">
                    <p class="subject">Notification</p>
                    <p class="text text-truncate">${message}</p>
                </div>
            </a>`);

            updateNotificationCount(); // Met à jour le compteur après ajout
        }
    });
    channel.bind(`manager1`, function (data) {
        if (data) {
            const {message, link, permission} = data;
            if (permissions.includes(permission)) {
                toastr.info(`${message}`, null, {
                    "closeButton": true,
                    "preventDuplicates": false,
                    "onclick": function () {
                        window.location.href = link;
                    }
                });

                let $notification1 = $('#notification-body');
                let notificationCount = $notification1.children().length;
                if (!$notification1.hasClass('dropdown-scroll has-scrollable') && notificationCount > 3) {
                    $notification1.addClass('dropdown-scroll has-scrollable');
                }
                if (notificationCount === 1) {
                    $notification1.empty();
                }
                if (!$('#header-notification').hasClass('has-notified')) {
                    $('#header-notification').addClass('has-notified');
                }
                $notification1.append(`<a href="${link}" class="dropdown-item unread">
                <div class="user-avatar">
                </div>
                <div class="dropdown-item-body">
                    <p class="subject">Notification</p>
                    <p class="text text-truncate">${message}</p>
                </div>
            </a>`);

                updateNotificationCount(); // Met à jour le compteur après ajout
            }
        }
    });
    if (caisseId) {
        channel.bind(`caisse.${caisseId}`, function (data) {
            if (data) {
                const {message, link, permission} = data;
                if (permissions.includes(permission)) {
                    toastr.info(`${message}`, null, {
                        "closeButton": true,
                        "preventDuplicates": false,
                        "onclick": function () {
                            window.location.href = link;
                        }
                    });

                    let $notification1 = $('#notification-body');
                    let notificationCount = $notification1.children().length;
                    if (!$notification1.hasClass('dropdown-scroll has-scrollable') && notificationCount > 3) {
                        $notification1.addClass('dropdown-scroll has-scrollable');
                    }
                    if (notificationCount === 1) {
                        $notification1.empty();
                    }
                    if (!$('#header-notification').hasClass('has-notified')) {
                        $('#header-notification').addClass('has-notified');
                    }
                    $notification1.append(`<a href="${link}" class="dropdown-item unread">
                <div class="user-avatar">
                </div>
                <div class="dropdown-item-body">
                    <p class="subject">Notification</p>
                    <p class="text text-truncate">${message}</p>
                </div>
            </a>`);

                    updateNotificationCount(); // Met à jour le compteur après ajout
                }
            }
        });
    }

    channel.bind(`user${userId}`, function (data) {
        if (data) {
            const {message, link, permission} = data;
            if (permissions.includes('ROLE_USER')) {
                toastr.info(`${message}`, 'Notification', {
                    "closeButton": true,
                    "preventDuplicates": false,
                    "onclick": function () {
                        window.location.href = link;
                    }
                });

                let $notificationBody = $('#notification-body');
                let notificationCount = $notificationBody.children().length;
                if (!$notificationBody.hasClass('dropdown-scroll has-scrollable') && notificationCount > 3) {
                    $notificationBody.addClass('dropdown-scroll has-scrollable');
                }
                if (notificationCount === 1) {
                    $notificationBody.empty();
                }
                if (!$('#header-notification').hasClass('has-notified')) {
                    $('#header-notification').addClass('has-notified');
                }
                $notificationBody.append(`<a href="${link}" class="dropdown-item unread">
                    <div class="user-avatar"></div>
                    <div class="dropdown-item-body">
                        <p class="subject">Notification</p>
                        <p class="text text-truncate">${message}</p>
                    </div>
                </a>`);

                updateNotificationCount(); // Met à jour le compteur après ajout
            }
        }
    });

    // Event listener pour marquer les notifications comme lues lorsqu'elles sont cliquées
    $(document).on('click', '#notification-body .dropdown-item.unread', function () {
        const notificationElement = $(this);
        const notificationId = notificationElement.data('id'); // Assurez-vous que chaque notification a un attribut data-id

        // Envoie une requête AJAX pour marquer la notification comme lue
        $.ajax({
            url: `/notification/read/${notificationId}`,
            type: 'POST',
            success: function () {
                notificationElement.removeClass('unread');  // Retire la classe 'unread'
                updateNotificationCount();                  // Mets à jour le compteur
            },
            error: function (xhr, status, error) {
                console.error('Erreur lors de la mise à jour de la notification :', error);
            }
        });
    });

    if (caisseId) {
        channel.bind(`caisse.${caisseId}`, function(data) {
            if (data) {
                const {message, link, permission} = data;
                if (permissions.includes('ROLE_MANAGER')) {
                    toastr.info(`${message}`, 'Notification', {
                        "closeButton": true,
                        "preventDuplicates": false,
                        "onclick": function () {
                            window.location.href = link;
                        }
                    });

                    let $notificationBody = $('#notification-body');
                    let notificationCount = $notificationBody.children().length;
                    if (!$notificationBody.hasClass('dropdown-scroll has-scrollable') && notificationCount > 3) {
                        $notificationBody.addClass('dropdown-scroll has-scrollable');
                    }
                    if (notificationCount === 1) {
                        $notificationBody.empty();
                    }
                    if (!$('#header-notification').hasClass('has-notified')) {
                        $('#header-notification').addClass('has-notified');
                    }
                    $notificationBody.append(`<a href="${link}" class="dropdown-item unread">
                    <div class="user-avatar"></div>
                    <div class="dropdown-item-body">
                        <p class="subject">Notification</p>
                        <p class="text text-truncate">${message}</p>
                    </div>
                </a>`);

                    updateNotificationCount(); // Met à jour le compteur après ajout
                }
            }
        });
    }



</script>
</body>
</html>